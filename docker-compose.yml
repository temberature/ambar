version: "3.7"
networks:
  internal_network:
services:      
  db:
    restart: always
    networks:
      - internal_network
    build: ./MongoDB/
    image: tiandatong/ambar-mongodb:2.1
    environment:
      - cacheSizeGB=2
    volumes:
      - /opt/db:/data/db
    expose:
      - "27017" 
    healthcheck:
      interval: 60s
    deploy:
      resources:
        limits:
          cpus: '0.30'
  es:
    restart: always
    networks:
      - internal_network
    build: ./ElasticSearch
    image: tiandatong/ambar-es:2.1
    expose:
      - "9200"
    ports:
      - "9200:9200"
    environment:
      - cluster.name=ambar-es
      - ES_JAVA_OPTS=-Xms2g -Xmx2g
    ulimits:
      memlock:
        soft: -1
        hard: -1  
      nofile:
        soft: 65536
        hard: 65536
    cap_add:
      - IPC_LOCK
    volumes:
      - /opt/es:/usr/share/elasticsearch/data
    healthcheck:
      interval: 60s
    deploy:
      resources:
        limits:
          cpus: '0.30'
  rabbit:
    restart: always
    networks:
      - internal_network
    build: ./Rabbit/
    image: tiandatong/ambar-rabbit:2.1
    hostname: rabbit
    expose:
      - "15672"
      - "5672"   
    volumes:
      - /opt/rabbit:/var/lib/rabbitmq
    healthcheck:
      interval: 60s
    deploy:
      resources:
        limits:
          cpus: '0.30'
  redis:
    restart: always
    sysctls:
      - net.core.somaxconn=1024
    networks:
      - internal_network
    build: ./Redis/
    image: tiandatong/ambar-redis:2.1
    expose:
      - "6379" 
    healthcheck:
      interval: 60s
    deploy:
      resources:
        limits:
          cpus: '0.30'
  serviceapi:
    depends_on:
      - redis
      - rabbit
      - es
      - db
    restart: always
    networks:
      - internal_network
    build: ./ServiceApi/
    image: tiandatong/ambar-serviceapi:2.1
    expose:
      - "8081"  
    environment:            
      - mongoDbUrl=mongodb://db:27017/ambar_data
      - elasticSearchUrl=http://es:9200
      - redisHost=redis
      - redisPort=6379
      - rabbitHost=amqp://rabbit
      - langAnalyzer=ambar_cjk  
      - SLAO_HOSTNAME=ambar 
      - SLAO_API_KEY=e540841ebbc95cb69d89351b89c58e756d4d1b2a3d8adf68fd624f49808db610
    healthcheck:
      interval: 60s
    deploy:
      resources:
        limits:
          cpus: '0.30'
  webapi:
    depends_on:
      - serviceapi
    restart: always
    networks:
      - internal_network
    build: ./WebApi/
    image: tiandatong/ambar-webapi:2.1
    expose:
      - "8080"
    ports:
      - "8080:8080"
    environment:            
      - uiLang=en
      - mongoDbUrl=mongodb://db:27017/ambar_data
      - elasticSearchUrl=http://es:9200
      - redisHost=redis
      - redisPort=6379
      - serviceApiUrl=http://serviceapi:8081
      - rabbitHost=amqp://rabbit  
      - SLAO_HOSTNAME=ambar
      - SLAO_API_KEY=e540841ebbc95cb69d89351b89c58e756d4d1b2a3d8adf68fd624f49808db610
    healthcheck:
      interval: 60s
    deploy:
      resources:
        limits:
          cpus: '0.30'
  frontend:
    depends_on:
      - webapi
    image: tiandatong/ambar-frontend:2.1
    restart: always
    networks:
      - internal_network
    ports:
      - "80:80"
    expose:
      - "80"
    environment:
      - api=http://localhost:8080  
    healthcheck:
      interval: 60s
    deploy:
      resources:
        limits:
          cpus: '0.30'
  pipeline0:
    depends_on: 
      - serviceapi                           
    build: ./Pipeline/
    image: tiandatong/ambar-pipeline0:2.1
    restart: always
    networks:
      - internal_network  
    environment:                
      - id=0
      - api_url=http://serviceapi:8081
      - rabbit_host=amqp://rabbit
    healthcheck:
      interval: 60s
    deploy:
      resources:
        limits:
          cpus: '0.30'
  my-files:
    depends_on: 
      - serviceapi 
    build: ./LocalCrawler/
    image: tiandatong/ambar-local-crawler:2.1
    restart: always
    networks:
      - internal_network
    expose:
      - "8082"
    environment:      
      - name=my-files
    volumes:
      - /c/books:/usr/data
    healthcheck:
      interval: 60s
    deploy:
      resources:
        limits:
          cpus: '0.30'
  kibana:
    depends_on:
      - es
    image: docker.elastic.co/kibana/kibana:5.6.3
    networks:
      - internal_network
    ports:
      - "5601:5601"
    expose:
      - "5601"
    environment:
      SERVER_NAME: kibana.example.org
      ELASTICSEARCH_URL: http://es:9200
    deploy:
      resources:
        limits:
          cpus: '0.30'
  logstash:
    build: ./Logstash/
    ports:
      - "5000:5000/tcp"
      - "5000:5000/udp"
      - "9600:9600"
    environment:
      LS_JAVA_OPTS: "-Xmx256m -Xms256m"
    networks:
      - internal_network
    depends_on:
      - es
    deploy:
      resources:
        limits:
          cpus: '0.30'